<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Recipe</title>
    <style>
       @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700;800;900&display=swap');

*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
:root{
    --tenne-tawny: #d65108;
    --tenne-tawny-dark: #b54507;
}
body{
    font-weight: 300;
    font-size: 1.05rem;
    line-height: 1.6;
    font-family: 'Poppins', sans-serif;
}

/*  */
.btn{
    font-family: inherit;
    cursor: pointer;
    outline: 0;
    font-size: 1.05rem;
}
.text{
    opacity: 0.8;
}
.title{
    font-size: 2rem;
    margin-bottom: 1rem;
}

/*  */
.container{
    min-height: 100vh;
}
.meal-wrapper{
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem;
    background: #fff;
    text-align: center;
}
.meal-search{
    margin: 2rem 0;
}
.meal-search cite{
    font-size: 1rem;
}
.meal-search-box{
    margin: 1.2rem 0;
    display: flex;
    align-items: stretch;
}
.search-control,
.search-btn{
    width: 100%;
}
.search-control{
    padding: 0 1rem;
    font-size: 1.1rem;
    font-family: inherit;
    outline: 0;
    border: 1px solid var(--tenne-tawny);
    color: var(--tenne-tawny);
    border-top-left-radius: 2rem;
    border-bottom-left-radius: 2rem;
}
.search-control::placeholder{
    color: var(--tenne-tawny);
}
.search-btn{
    width: 55px;
    height: 55px;
    font-size: 1.8rem;
    background: var(--tenne-tawny);
    color: #fff;
    border: none;
    border-top-right-radius: 2rem;
    border-bottom-right-radius: 2rem;
    transition: all 0.4s linear;
    -webkit-transition: all 0.4s linear;
    -moz-transition: all 0.4s linear;
    -ms-transition: all 0.4s linear;
    -o-transition: all 0.4s linear;
}
.search-btn:hover{
    background: var(--tenne-tawny-dark);
}
.meal-result{
    margin-top: 4rem;
}
#meal{
    margin: 2.4rem 0;
}
.meal-item{
    border-radius: 1rem;
    -webkit-border-radius: 1rem;
    -moz-border-radius: 1rem;
    -ms-border-radius: 1rem;
    -o-border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 21px -12px rgba(0, 0, 0, 0.79);
    margin: 2rem 0;
}
.meal-img img{
    width: 100%;
    height: 200px;
    display: block;
}
.meal-name{
    padding: 1.5rem 0.5rem;
}
.meal-name h3{
    font-size: 1.4rem;
}
.recipe-btn{
    text-decoration: none;
    color: #fff;
    background: var(--tenne-tawny);
    font-weight: 500;
    font-size: 1.1rem;
    padding: 0.75rem 0;
    display: block;
    width: 175px;
    margin: 1rem auto;
    border-radius: 2rem;
    transition: all 0.4s linear;
}
.recipe-btn:hover{
    background: var(--tenne-tawny-dark);
}

/* meal details */
.meal-details{
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    color: #fff;
    background: var(--tenne-tawny);
    border-radius: 1rem;
    -webkit-border-radius: 1rem;
    -moz-border-radius: 1rem;
    -ms-border-radius: 1rem;
    -o-border-radius: 1rem;
    width: 90%;
    height: 90%;
    overflow-y: scroll;
    display: none;
    padding: 2rem 0;
}
.meal-details::-webkit-scrollbar{
    width: 10px;
}
.meal-details::-webkit-scrollbar-thumb{
    background: #f0f0f0;
    border-radius: 2rem;
    -webkit-border-radius: 2rem;
    -moz-border-radius: 2rem;
    -ms-border-radius: 2rem;
    -o-border-radius: 2rem;
}


/* js related */
.showRecipe{
    display: block;
}

.meal-details-content{
    margin: 2rem;
}
.meal-details-content p:not(.recipe-category){
    padding: 1rem 0;
}
.recipe-close-btn{
    position: absolute;
    right: 2rem;
    top: 2rem;
    font-size: 1.8rem;
    background: #fff;
    border: none;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.9;
}
.recipe-title{
    letter-spacing: 1px;
    padding-bottom: 1rem;
}
.recipe-category{
    background: #fff;
    font-weight: 600;
    color: var(--tenne-tawny);
    display: inline-block;
    padding: 0.2rem 0.5rem;
    border-radius: 0.3rem;
    -webkit-border-radius: 0.3rem;
    -moz-border-radius: 0.3rem;
    -ms-border-radius: 0.3rem;
    -o-border-radius: 0.3rem;
}
.recipe-category{
    background: #fff;
    font-weight: 600;
    color: var(--tenne-tawny);
    display: inline-block;
    padding: 0.2rem 0.5rem;
    border-radius: 0.3rem;
    -webkit-border-radius: 0.3rem;
    -moz-border-radius: 0.3rem;
    -ms-border-radius: 0.3rem;
    -o-border-radius: 0.3rem;
}
.recipe-instruct{
    padding: 1rem 0;
}
.recipe-meal-img img{
    width: 170px;
    height: 170px;
    border-radius: 50%;
    margin:0 auto;
    display: block;
}
.recipe-link{
    margin: 1.4rem 0;
}
.recipe-link a{
    color: #fff;
    font-size: 1.2rem;
    font-weight: 700;
    transition: all 0.4s linear;
    -webkit-transition: all 0.4s linear;
    -moz-transition: all 0.4s linear;
    -ms-transition: all 0.4s linear;
    -o-transition: all 0.4s linear;
}
.recipe-link a:hover{
    opacity: 0.8;
}


/*  */
.notFound{
    grid-template-columns: 1fr!important;
    color: var(--tenne-tawny);
    font-size: 1.8rem;
    font-weight: 600;
    width: 100%;
}

/* Media Queries */
@media screen and (min-width: 600px){
    .meal-search-box{
        width: 540px;
        margin-left: auto;
        margin-right: auto;
    }
}

@media screen and (min-width: 768px){
    #meal{
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 2rem;
    }
    .meal-item{
        margin: 0;
    }
    .meal-details{
        width: 700px;
    }
}

@media screen and (min-width: 992px){
    #meal{
        grid-template-columns: repeat(3, 1fr);
    }
}

.ing {
    padding: 10px 20px;
    /* border: 2px solid #ff6e00; */
    color: #f8f6f4;
    font-family: sans-serif;
    border-radius: 100px;
    width: auto;
  }
      </style>
  </head>
  <body>
    <!-- <h1>Data</h1> -->
    <div class = "container">
        <div class = "meal-wrapper">
    <div class = "meal-result">
        <h2 class = "title">Your Recipe Results</h2>
        
        
        <div id="meal">
    <% data.map((el)=>{ %>
        <div class = "meal-item">
            <div class = "meal-img">
                <img src =  <%= el.imgurl %> alt = "food">
            </div>
            <div class = "meal-name">
                <h3><%= el.ingredient %></h3>
                <a class = "recipe-btn">Get Recipe</a>
            </div>
        </div>
        <% }) %>
    </div>
</div>
</div>

<div class = "meal-details">
</div>
    </div>
  </div>
  </body>
  <script>
    const searchBtn = document.getElementById("search-btn");
    const mealList = document.getElementById("meal");
    const mealDetailsContent = document.querySelector(".meal-details");
  
    // Static data to replace API data
    const staticMealsData = [
      {
        label: "Salad",
        image: "salad.jpg",
        calories: 150,
        ingredientLines: ["Lettuce", "Tomato", "Cucumber", "Dressing"],
        url: "https://example.com/salad-recipe",
      },
      {
        label: "Spaghetti",
        image: "spaghetti.jpg",
        calories: 400,
        ingredientLines: ["Pasta", "Tomato Sauce", "Parmesan"],
        url: "https://example.com/spaghetti-recipe",
      },
      {
        label: "Pizza",
        image: "pizza.jpg",
        calories: 800,
        ingredientLines: ["Dough", "Tomato Sauce", "Cheese", "Pepperoni"],
        url: "https://example.com/pizza-recipe",
      },
    ];
  
    // searchBtn.addEventListener("click", getMealList);
    // mealList.addEventListener("click", getMealRecipe);
  
    function getMealList() {
      let searchInputTxt = document.getElementById("search-input").value.toLowerCase();
      let html = "";
  
      if (searchInputTxt == "") {
        Swal.fire({
          position: "top-end",
          icon: "error",
          title: "Please Enter Recipe Name",
          showConfirmButton: false,
          timer: 1500,
        });
      } else {
        const filteredMeals = staticMealsData.filter((meal) =>
          meal.label.toLowerCase().includes(searchInputTxt)
        );
  
        if (filteredMeals.length === 0) {
          Swal.fire({
            position: "top-end",
            icon: "error",
            title: "Please Re-Enter Recipe Name",
            showConfirmButton: false,
            timer: 1500,
          });
        } else {
          filteredMeals.forEach((meal) => {
            html += `<div class = "meal-item">
                          <div class = "meal-img">
                              <img src = "${meal.image}" alt = "food">
                          </div>
                          <div class = "meal-name">
                              <h3 value=${meal.label}>${meal.label}</h3>
                              <a href = "#" class = "recipe-btn">Get Recipe</a>
                          </div>
                      </div>
              </div>`;
          });
          mealList.innerHTML = html;
          mealList.classList.remove("notFound");
        }
      }
    }
  
    function getMealRecipe(e) {
      e.preventDefault();
      let mealItem = e.target.parentElement.getElementsByTagName("h3")[0].innerHTML;
  
      const selectedMeal = staticMealsData.find(
        (meal) => meal.label === mealItem
      );
  
      if (selectedMeal) {
        mealRecipeModal(selectedMeal);
      }
    }
  
    function mealRecipeModal(meal) {
      let html = `
        <button type="button" class="btn recipe-close-btn" onclick="rc()">
          <i class="fas fa-times"></i>
        </button>
        <div class="meal-details-content">
          <h2 class="recipe-title">${meal.label}</h2>
          <p class="recipe-category">Calories: ${meal.calories}</p>
          <div class="recipe-instruct">
            <h3>Ingredients:</h3>
            <p><ul>${meal.ingredientLines
              .map((ing) => `<li class="ing">${ing}</li>`)
              .join("")}</ul></p>
          </div>
          <div class="recipe-meal-img">
            <img src="${meal.image}" alt="${meal.label}">
          </div>
          <div class="recipe-link">
            <a href="${meal.url}" target="_blank">Watch Video</a>
          </div>
        </div>
      `;
      mealDetailsContent.innerHTML = html;
      mealDetailsContent.classList.add("showRecipe");
    }
  
    function rc() {
      mealDetailsContent.classList.remove("showRecipe");
    }
  
    // Function to display default meals (like on initial page load)
    function bydefault() {
      let html = "";
      staticMealsData.forEach((meal) => {
        html += `<div class = "meal-item">
                        <div class = "meal-img">
                            <img src = "${meal.image}" alt = "food">
                        </div>
                        <div class = "meal-name">
                            <h3 value=${meal.label}>${meal.label}</h3>
                            <a href = "#" class = "recipe-btn">Get Recipe</a>
                        </div>
                    </div>`;
      });
      mealList.innerHTML = html;
      mealList.classList.remove("notFound");
    }
  
    // Call bydefault function to show meals initially
    bydefault();
  </script>
  
</html>
